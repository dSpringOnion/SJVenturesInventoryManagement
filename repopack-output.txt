This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-18T15:02:20.972Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
client/.eslintrc.json
client/.gitignore
client/next.config.mjs
client/package.json
client/postcss.config.mjs
client/public/next.svg
client/public/vercel.svg
client/README.md
client/src/app/(components)/Header/index.tsx
client/src/app/(components)/Navbar/index.tsx
client/src/app/(components)/pageSearch/Pagination.tsx
client/src/app/(components)/pageSearch/ProductList.tsx
client/src/app/(components)/pageSearch/SearchBar.tsx
client/src/app/(components)/pageSearch/SortOptions.tsx
client/src/app/(components)/Rating/index.tsx
client/src/app/(components)/Sidebar/index.tsx
client/src/app/dashboard/CardExpenseSummary.tsx
client/src/app/dashboard/CardSalesSummary.tsx
client/src/app/dashboard/page.tsx
client/src/app/dashboard/StatCard.tsx
client/src/app/dashboardWrapper.tsx
client/src/app/expenses/page.tsx
client/src/app/globals.css
client/src/app/inventory/page.tsx
client/src/app/layout.tsx
client/src/app/page.tsx
client/src/app/products/CreateProductModal.tsx
client/src/app/products/page.tsx
client/src/app/redux.tsx
client/src/app/settings/page.tsx
client/src/app/users/page.tsx
client/src/state/api.ts
client/src/state/globalSlice.ts
client/src/state/index.ts
client/tailwind.config.ts
client/tsconfig.json
server/.gitignore
server/aws-ec2-instructions.md
server/ecosystem.config.js
server/package.json
server/prisma/migrations/20240711174419_init/migration.sql
server/prisma/migrations/migration_lock.toml
server/prisma/schema.prisma
server/prisma/seed.ts
server/prisma/seedData/invoice.json
server/prisma/seedData/invoiceItem.json
server/prisma/seedData/location.json
server/prisma/seedData/locations.json
server/prisma/seedData/product.json
server/prisma/seedData/productStockLevel.json
server/prisma/seedData/user.json
server/prisma/seedData/users.json
server/prisma/seedData/vendor.json
server/src/controllers/dashboardController.ts
server/src/controllers/expenseController.ts
server/src/controllers/productController.ts
server/src/controllers/userController.ts
server/src/controllers/vendorController.ts
server/src/index.ts
server/src/middleware/authMiddleware.ts
server/src/middleware/authorizeRoles.ts
server/src/routes/dashboardRoutes.ts
server/src/routes/expenseRoutes.ts
server/src/routes/productRoutes.ts
server/src/routes/userRoutes.ts
server/src/routes/vendorRoutes.ts
server/tsconfig.json
server/types/express.d.ts

================================================================
Repository Files
================================================================

================
File: .gitignore
================
client/node_modules/
server/node_modules/
client/dist/
server/dist/
client/.env.local/
server/.env/
client/.next/

================
File: client/.eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: client/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: client/next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "",
        port: "",
        pathname: "/**",
      },
    ],
  },
};

export default nextConfig;

================
File: client/package.json
================
{
  "name": "inventory-management",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@headlessui/react": "^2.1.10",
    "@mui/material": "^5.16.0",
    "@mui/x-data-grid": "^7.9.0",
    "@reduxjs/toolkit": "^2.2.6",
    "axios": "1.7.4",
    "bcrypt": "^5.1.1",
    "dotenv": "^16.4.5",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.407.0",
    "next": "14.2.10",
    "numeral": "^2.0.6",
    "react": "^18",
    "react-dom": "^18",
    "react-redux": "^9.1.2",
    "recharts": "^2.12.7",
    "redux-persist": "^6.0.0",
    "uuid": "^10.0.0"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.2",
    "@types/jsonwebtoken": "^9.0.7",
    "@types/node": "^20.14.10",
    "@types/numeral": "^2.0.5",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@types/uuid": "^10.0.0",
    "eslint": "^8",
    "eslint-config-next": "14.2.4",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "tw-colors": "^3.3.1",
    "typescript": "^5"
  }
}

================
File: client/postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: client/public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: client/public/vercel.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>

================
File: client/README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: client/src/app/(components)/Header/index.tsx
================
type HeaderProps = {
  name: string;
};

const Header = ({ name }: HeaderProps) => {
  return <h1 className="text-2xl font-semibold text-gray-700">{name}</h1>;
};

export default Header;

================
File: client/src/app/(components)/Navbar/index.tsx
================
"use client";

import { useAppDispatch, useAppSelector } from "@/app/redux";
import { setIsDarkMode, setIsSidebarCollapsed } from "@/state";
import { Bell, Menu, Moon, Settings, Sun } from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import React from "react";

const Navbar = () => {
  const dispatch = useAppDispatch();
  const isSidebarCollapsed = useAppSelector(
    (state) => state.global.isSidebarCollapsed
  );
  const isDarkMode = useAppSelector((state) => state.global.isDarkMode);

  const toggleSidebar = () => {
    dispatch(setIsSidebarCollapsed(!isSidebarCollapsed));
  };

  const toggleDarkMode = () => {
    dispatch(setIsDarkMode(!isDarkMode));
  };

  return (
    <div className="flex justify-between items-center w-full mb-7">
      {/* LEFT SIDE */}
      <div className="flex justify-between items-center gap-5">
        <button
          className="px-3 py-3 bg-gray-100 rounded-full hover:bg-blue-100"
          onClick={toggleSidebar}
        >
          <Menu className="w-4 h-4" />
        </button>

        <div className="relative">
          <input
            type="search"
            placeholder="Start type to search groups & products"
            className="pl-10 pr-4 py-2 w-50 md:w-60 border-2 border-gray-300 bg-white rounded-lg focus:outline-none focus:border-blue-500"
          />

          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-non">
            <Bell className="text-gray-500" size={20} />
          </div>
        </div>
      </div>

      {/* RIGHT SIDE */}
      <div className="flex justify-between items-center gap-5">
        <div className="hidden md:flex justify-between items-center gap-5">
          <div>
            <button onClick={toggleDarkMode}>
              {isDarkMode ? (
                <Sun className="cursor-pointer text-gray-500" size={24} />
              ) : (
                <Moon className="cursor-pointer text-gray-500" size={24} />
              )}
            </button>
          </div>
          <div className="relative">
            <Bell className="cursor-pointer text-gray-500" size={24} />
            <span className="absolute -top-2 -right-2 inline-flex items-center justify-center px-[0.4rem] py-1 text-xs font-semibold leading-none text-red-100 bg-red-400 rounded-full">
              3
            </span>
          </div>
          <hr className="w-0 h-7 border border-solid border-l border-gray-300 mx-3" />
          <div className="flex items-center gap-3 cursor-pointer">
            <Image
              src="https://sj-inv-managment.s3.us-east-2.amazonaws.com/SJ.png"
              alt="Profile"
              width={50}
              height={50}
              className="rounded-full h-full object-cover"
            />
            <span className="font-semibold">Ed Roh</span>
          </div>
        </div>
        <Link href="/settings">
          <Settings className="cursor-pointer text-gray-500" size={24} />
        </Link>
      </div>
    </div>
  );
};

export default Navbar;

================
File: client/src/app/(components)/pageSearch/Pagination.tsx
================
import React from "react";

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
}

const Pagination: React.FC<PaginationProps> = ({
  currentPage,
  totalPages,
  onPageChange,
}) => {
  return (
    <div className="pagination">
      <button
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
      >
        Previous
      </button>
      <span>
        Page {currentPage} of {totalPages}
      </span>
      <button
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages || totalPages === 0}
      >
        Next
      </button>
    </div>
  );
};

export default Pagination;

================
File: client/src/app/(components)/pageSearch/ProductList.tsx
================
import React, { useState } from "react";
import { useGetProductsQuery } from "@/state/api"; // Import the RTK query hook
import Pagination from "./Pagination";
import SearchBar from "./SearchBar";
import SortOptions from "./SortOptions";

const ProductList: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [sortBy, setSortBy] = useState("name");
  const [sortOrder, setSortOrder] = useState<"asc" | "desc">("asc"); // Fix here
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10; // Fixed page size

  // Use the query hook to fetch products based on search term, sort options, and pagination
  const { data, isLoading, isError } = useGetProductsQuery({
    page: currentPage,
    limit: pageSize,
    search: searchTerm,
    sortBy,
    sortOrder,
  });

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleSearch = (term: string) => {
    setSearchTerm(term);
    setCurrentPage(1); // Reset to first page on new search
  };

  const handleSortChange = (
    newSortBy: string,
    newSortOrder: "asc" | "desc"
  ) => {
    // Ensure sortOrder type
    setSortBy(newSortBy);
    setSortOrder(newSortOrder);
    setCurrentPage(1); // Reset to first page on sort change
  };

  if (isLoading) return <p>Loading...</p>;
  if (isError) return <p>Error fetching products</p>;

  return (
    <div className="product-list">
      <SearchBar onSearch={handleSearch} />
      <SortOptions
        sortBy={sortBy}
        sortOrder={sortOrder}
        onSortChange={handleSortChange}
      />
      {/* Render the list of products */}
      <div className="products">
        {data?.data.map((product) => (
          <div key={product.productId} className="product-item">
            <h3>{product.name}</h3>
            <p>{product.chineseName}</p>
            <p>Price: ${product.price}</p>
            {/* Add more product details as needed */}
          </div>
        ))}
      </div>
      {/* Pagination */}
      <Pagination
        currentPage={currentPage}
        totalPages={data?.pagination.totalPages || 1}
        onPageChange={handlePageChange}
      />
    </div>
  );
};

export default ProductList;

================
File: client/src/app/(components)/pageSearch/SearchBar.tsx
================
import React, { useState } from "react";

interface SearchProps {
  onSearch: (searchTerm: string) => void;
}

const SearchBar: React.FC<SearchProps> = ({ onSearch }) => {
  const [searchTerm, setSearchTerm] = useState("");

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    onSearch(searchTerm);
  };

  return (
    <form onSubmit={handleSearch} className="search-bar">
      <input
        type="text"
        placeholder="Search products..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />
      <button type="submit">Search</button>
    </form>
  );
};

export default SearchBar;

================
File: client/src/app/(components)/pageSearch/SortOptions.tsx
================
import React from "react";

interface SortProps {
  sortBy: string;
  sortOrder: "asc" | "desc"; // Restrict sortOrder to "asc" or "desc"
  onSortChange: (sortBy: string, sortOrder: "asc" | "desc") => void; // Adjust the callback type
}

const SortOptions: React.FC<SortProps> = ({
  sortBy,
  sortOrder,
  onSortChange,
}) => {
  const handleSortByChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    onSortChange(e.target.value, sortOrder); // Pass the current sortOrder
  };

  const handleSortOrderChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    onSortChange(sortBy, e.target.value as "asc" | "desc"); // Ensure the correct type for sortOrder
  };

  return (
    <div className="sort-options">
      <select value={sortBy} onChange={handleSortByChange}>
        <option value="name">Name</option>
        <option value="price">Price</option>
        {/* Add other sorting fields if necessary */}
      </select>
      <select value={sortOrder} onChange={handleSortOrderChange}>
        <option value="asc">Ascending</option>
        <option value="desc">Descending</option>
      </select>
    </div>
  );
};

export default SortOptions;

================
File: client/src/app/(components)/Rating/index.tsx
================
import { Star } from "lucide-react";
import React from "react";

type RatingProps = {
  rating: number;
};

const Rating = ({ rating }: RatingProps) => {
  return [1, 2, 3, 4, 5].map((index) => (
    <Star
      key={index}
      color={index <= rating ? "#FFC107" : "#E4E5E9"}
      className="w-4 h-4"
    />
  ));
};

export default Rating;

================
File: client/src/app/(components)/Sidebar/index.tsx
================
"use client";

import { useAppDispatch, useAppSelector } from "@/app/redux";
import { setIsSidebarCollapsed } from "@/state";
import {
  Archive,
  CircleDollarSign,
  Clipboard,
  Layout,
  LucideIcon,
  Menu,
  SlidersHorizontal,
  User,
} from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import { usePathname } from "next/navigation";
import React from "react";

interface SidebarLinkProps {
  href: string;
  icon: LucideIcon;
  label: string;
  isCollapsed: boolean;
}

const SidebarLink = ({
  href,
  icon: Icon,
  label,
  isCollapsed,
}: SidebarLinkProps) => {
  const pathname = usePathname();
  const isActive =
    pathname === href || (pathname === "/" && href === "/dashboard");

  return (
    <Link href={href}>
      <div
        className={`cursor-pointer flex items-center ${
          isCollapsed ? "justify-center py-4" : "justify-start px-8 py-4"
        }
        hover:text-blue-500 hover:bg-blue-100 gap-3 transition-colors ${
          isActive ? "bg-blue-200 text-white" : ""
        }
      }`}
      >
        <Icon className="w-6 h-6 !text-gray-700" />

        <span
          className={`${
            isCollapsed ? "hidden" : "block"
          } font-medium text-gray-700`}
        >
          {label}
        </span>
      </div>
    </Link>
  );
};

const Sidebar = () => {
  const dispatch = useAppDispatch();
  const isSidebarCollapsed = useAppSelector(
    (state) => state.global.isSidebarCollapsed
  );

  const toggleSidebar = () => {
    dispatch(setIsSidebarCollapsed(!isSidebarCollapsed));
  };

  const sidebarClassNames = `fixed flex flex-col ${
    isSidebarCollapsed ? "w-0 md:w-16" : "w-72 md:w-64"
  } bg-white transition-all duration-300 overflow-hidden h-full shadow-md z-40`;

  return (
    <div className={sidebarClassNames}>
      {/* TOP LOGO */}
      <div
        className={`flex gap-3 justify-between md:justify-normal items-center pt-8 ${
          isSidebarCollapsed ? "px-5" : "px-8"
        }`}
      >
        <Image
          src="https://s3-inventorymanagement.s3.us-east-2.amazonaws.com/logo.png"
          alt="edstock-logo"
          width={27}
          height={27}
          className="rounded w-8"
        />
        <h1
          className={`${
            isSidebarCollapsed ? "hidden" : "block"
          } font-extrabold text-2xl`}
        >
          SJVentures
        </h1>

        <button
          className="md:hidden px-3 py-3 bg-gray-100 rounded-full hover:bg-blue-100"
          onClick={toggleSidebar}
        >
          <Menu className="w-4 h-4" />
        </button>
      </div>

      {/* LINKS */}
      <div className="flex-grow mt-8">
        <SidebarLink
          href="/dashboard"
          icon={Layout}
          label="Dashboard"
          isCollapsed={isSidebarCollapsed}
        />
        <SidebarLink
          href="/inventory"
          icon={Archive}
          label="Vendors"
          isCollapsed={isSidebarCollapsed}
        />
        <SidebarLink
          href="/products"
          icon={Clipboard}
          label="Products"
          isCollapsed={isSidebarCollapsed}
        />
        <SidebarLink
          href="/users"
          icon={User}
          label="Users"
          isCollapsed={isSidebarCollapsed}
        />
        <SidebarLink
          href="/settings"
          icon={SlidersHorizontal}
          label="Settings"
          isCollapsed={isSidebarCollapsed}
        />
        <SidebarLink
          href="/expenses"
          icon={CircleDollarSign}
          label="Generate Invoice"
          isCollapsed={isSidebarCollapsed}
        />
      </div>

      {/* FOOTER */}
      <div className={`${isSidebarCollapsed ? "hidden" : "block"} mb-10`}>
        <p className="text-center text-xs text-gray-500">&copy; 2024 Edstock</p>
      </div>
    </div>
  );
};

export default Sidebar;

================
File: client/src/app/dashboard/CardExpenseSummary.tsx
================
"use client";

import { useGetLowStockProductsQuery } from "@/state/api";

const CardLowStock = () => {
    const { data: lowStockProductsResponse, isLoading, isError } =
        useGetLowStockProductsQuery();

    const lowStockProducts = lowStockProductsResponse?.data || [];

    if (isLoading) {
        return <div className="m-5">Loading...</div>;
    }

    if (isError || !lowStockProducts) {
        return <div className="m-5">Error loading low-stock products.</div>;
    }

    if (lowStockProducts.length === 0) {
        return <div className="m-5">No products are currently low in stock.</div>;
    }

    return (
        <div className="bg-white shadow-md rounded-2xl p-6 flex flex-col">
            <h2 className="text-lg font-semibold mb-4">Low Stock Products</h2>
            <table className="min-w-full table-auto">
                <thead>
                <tr>
                    <th className="px-4 py-2 text-left">Product Name</th>
                    <th className="px-4 py-2 text-left">Current Stock</th>
                    <th className="px-4 py-2 text-left">Minimum Stock</th>
                </tr>
                </thead>
                <tbody>
                {lowStockProducts.map((product) => {
                    const totalStockQuantity = product.stockLevels
                        ? product.stockLevels.reduce(
                            (total, stockLevel) => total + stockLevel.stockQuantity,
                            0
                        )
                        : 0;

                    return (
                        <tr key={product.productId} className="border-t">
                            <td className="px-4 py-2">{product.name}</td>
                            <td className="px-4 py-2">{totalStockQuantity}</td>
                            <td className="px-4 py-2">{product.minimumStock || 0}</td>
                        </tr>
                    );
                })}
                </tbody>
            </table>
        </div>
    );
};

export default CardLowStock;

================
File: client/src/app/dashboard/CardSalesSummary.tsx
================
import { useGetInvoicesQuery } from "@/state/api";
import React, { useState } from "react";

const InboxInvoices = () => {
  const { data, isLoading, isError } = useGetInvoicesQuery({
    status: "PENDING",
  });
  const [selectedInvoice, setSelectedInvoice] = useState<string | null>(null);

  if (isError) {
    return <div className="m-5">Failed to fetch invoices</div>;
  }

  const handleInvoiceClick = (invoiceId: string) => {
    setSelectedInvoice(invoiceId);
    // Here you could mark the invoice as read, or open it for detailed view
  };

  return (
    <div className="row-span-3 xl:row-span-6 bg-white shadow-md rounded-2xl flex flex-col justify-between">
      {isLoading ? (
        <div className="m-5">Loading...</div>
      ) : (
        <>
          {/* HEADER */}
          <div>
            <h2 className="text-lg font-semibold mb-2 px-7 pt-5">
              Unread Invoices
            </h2>
            <hr />
          </div>

          {/* BODY */}
          <div className="overflow-y-auto max-h-96 px-7 py-4">
            {data?.data.length === 0 ? (
              <p className="text-center text-gray-500">No unread invoices</p>
            ) : (
              data?.data.map((invoice) => (
                <div
                  key={invoice.invoiceId}
                  className={`p-3 mb-2 cursor-pointer rounded-lg border ${
                    selectedInvoice === invoice.invoiceId
                      ? "bg-blue-100"
                      : "bg-white"
                  }`}
                  onClick={() => handleInvoiceClick(invoice.invoiceId)}
                >
                  <div className="flex justify-between">
                    <div>
                      <p className="text-sm text-gray-500">
                        {invoice.manager?.name || "Unknown Manager"}
                      </p>
                      <p className="text-sm text-gray-600">
                        {new Date(invoice.createdAt).toLocaleDateString(
                          "en-US"
                        )}
                      </p>
                    </div>
                    <div className="text-sm font-medium text-blue-500">
                      Status: {invoice.status}
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>

          {/* FOOTER */}
          <div>
            <hr />
            <div className="flex justify-between items-center mt-6 text-sm px-7 mb-4">
              <p>{data?.data.length || 0} unread invoices</p>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default InboxInvoices;

================
File: client/src/app/dashboard/page.tsx
================
"use client";

import {
    CheckCircle,
    Package,
    Tag,
    TrendingDown,
    TrendingUp,
} from "lucide-react";
import StatCard from "./StatCard";
import { useGetInvoicesQuery, useGetUsersQuery, useGetLowStockProductsQuery } from "@/state/api";

const Dashboard = () => {
    // Fetch all users - this needs to be refined to get the current user
    const { data: users } = useGetUsersQuery();

    // Assuming there's logic to get the current user, for example:
    const currentUser = users?.find((user) => user.email === "user@example.com"); // Update this logic based on how you manage current user authentication

    // Check if the current user is an admin
    const isAdmin = currentUser?.role === "ADMIN";

    // Fetch new/unread invoices for admin inbox
    const {
        data: invoicesData,
        isLoading: isInvoicesLoading,
        isError: isInvoicesError,
    } = useGetInvoicesQuery({
        status: "PENDING", // Fetch pending invoices for admin attention
    });

    // Fetch low-stock products
    const {
        data: lowStockProductsResponse,
        isLoading: isLowStockLoading,
        isError: isLowStockError,
    } = useGetLowStockProductsQuery();

    const lowStockProducts = lowStockProductsResponse?.data || [];

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 xl:overflow-auto gap-10 pb-4 custom-grid-rows">
            {/* Admin Inbox - Visible only for Admins */}
            {isAdmin && (
                <div className="bg-white shadow-md rounded-2xl p-6 flex flex-col">
                    <h2 className="text-lg font-semibold mb-2">
                        Admin Inbox - Pending Invoices
                    </h2>
                    {isInvoicesLoading ? (
                        <div>Loading...</div>
                    ) : isInvoicesError ? (
                        <div>Error loading invoices</div>
                    ) : invoicesData?.data.length === 0 ? (
                        <div>No new invoices</div>
                    ) : (
                        <div className="space-y-4">
                            {invoicesData?.data.slice(0, 5).map((invoice) => (
                                <div key={invoice.invoiceId} className="border p-4 rounded-md">
                                    <div className="flex justify-between items-center">
                                        <span>Manager: {invoice.manager?.name || "Unknown"}</span>
                                        <span>
                      {new Date(invoice.createdAt).toLocaleDateString()}
                    </span>
                                    </div>
                                    <div>
                                        Location: {invoice.location?.name || "Unknown Location"}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            )}

            {/* Low Stock Products */}
            {isAdmin && (
                <div className="bg-white shadow-md rounded-2xl p-6 flex flex-col">
                    <h2 className="text-lg font-semibold mb-2">Low Stock Products</h2>
                    {isLowStockLoading ? (
                        <div>Loading...</div>
                    ) : isLowStockError ? (
                        <div>Error loading low stock products.</div>
                    ) : lowStockProducts.length === 0 ? (
                        <div>No products are currently low in stock.</div>
                    ) : (
                        <table className="min-w-full table-auto">
                            <thead>
                            <tr>
                                <th className="px-4 py-2 text-left">Product Name</th>
                                <th className="px-4 py-2 text-left">Current Stock</th>
                                <th className="px-4 py-2 text-left">Minimum Stock</th>
                            </tr>
                            </thead>
                            <tbody>
                            {lowStockProducts.map((product) => {
                                const totalStockQuantity = product.stockLevels
                                    ? product.stockLevels.reduce(
                                        (total, stockLevel) => total + stockLevel.stockQuantity,
                                        0
                                    )
                                    : 0;

                                return (
                                    <tr key={product.productId} className="border-t">
                                        <td className="px-4 py-2">{product.name}</td>
                                        <td className="px-4 py-2">{totalStockQuantity}</td>
                                        <td className="px-4 py-2">{product.minimumStock || 0}</td>
                                    </tr>
                                );
                            })}
                            </tbody>
                        </table>
                    )}
                </div>
            )}

            {/* Stat Cards - Keeping the original metrics */}
            <StatCard
                title="Sales & Discount"
                primaryIcon={<Tag className="text-blue-600 w-6 h-6" />}
                dateRange="22 - 29 October 2023"
                details={[
                    {
                        title: "Sales",
                        amount: "1000.00",
                        changePercentage: 20,
                        IconComponent: TrendingUp,
                    },
                    {
                        title: "Discount",
                        amount: "200.00",
                        changePercentage: -10,
                        IconComponent: TrendingDown,
                    },
                ]}
            />

            <StatCard
                title="Customer & Expenses"
                primaryIcon={<Package className="text-blue-600 w-6 h-6" />}
                dateRange="22 - 29 October 2023"
                details={[
                    {
                        title: "Customer Growth",
                        amount: "175.00",
                        changePercentage: 131,
                        IconComponent: TrendingUp,
                    },
                    {
                        title: "Expenses",
                        amount: "10.00",
                        changePercentage: -56,
                        IconComponent: TrendingDown,
                    },
                ]}
            />

            <StatCard
                title="Dues & Pending Orders"
                primaryIcon={<CheckCircle className="text-blue-600 w-6 h-6" />}
                dateRange="22 - 29 October 2023"
                details={[
                    {
                        title: "Dues",
                        amount: "250.00",
                        changePercentage: 131,
                        IconComponent: TrendingUp,
                    },
                    {
                        title: "Pending Orders",
                        amount: "147",
                        changePercentage: -56,
                        IconComponent: TrendingDown,
                    },
                ]}
            />
        </div>
    );
};

export default Dashboard;

================
File: client/src/app/dashboard/StatCard.tsx
================
import { LucideIcon } from "lucide-react";
import React from "react";

type StatDetail = {
  title: string;
  amount: string;
  changePercentage: number;
  IconComponent: LucideIcon;
};

type StatCardProps = {
  title: string;
  primaryIcon: JSX.Element;
  details: StatDetail[];
  dateRange: string;
};

const StatCard = ({
  title,
  primaryIcon,
  details,
  dateRange,
}: StatCardProps) => {
  const formatPercentage = (value: number) => {
    const signal = value >= 0 ? "+" : "";
    return `${signal}${value.toFixed()}%`;
  };

  const getChangeColor = (value: number) =>
    value >= 0 ? "text-green-500" : "text-red-500";

  return (
    <div className="md:row-span-1 xl:row-span-2 bg-white col-span-1 shadow-md rounded-2xl flex flex-col justify-between">
      {/* HEADER */}
      <div>
        <div className="flex justify-between items-center mb-2 px-5 pt-4">
          <h2 className="font-semibold text-lg text-gray-700">{title}</h2>
          <span className="text-xs text-gray-400">{dateRange}</span>
        </div>
        <hr />
      </div>

      {/* BODY */}
      <div className="flex mb-6 items-center justify-around gap-4 px-5">
        <div className="rounded-full p-5 bg-blue-50 border-sky-300 border-[1px]">
          {primaryIcon}
        </div>
        <div className="flex-1">
          {details.map((detail, index) => (
            <React.Fragment key={index}>
              <div className="flex items-center justify-between my-4">
                <span className="text-gray-500">{detail.title}</span>
                <span className="font-bold text-gray-800">{detail.amount}</span>
                <div className="flex items-center">
                  <detail.IconComponent
                    className={`w-4 h-4 mr-1 ${getChangeColor(
                      detail.changePercentage
                    )}`}
                  />

                  <span
                    className={`font-medium ${getChangeColor(
                      detail.changePercentage
                    )}`}
                  >
                    {formatPercentage(detail.changePercentage)}
                  </span>
                </div>
              </div>
              {index < details.length - 1 && <hr />}
            </React.Fragment>
          ))}
        </div>
      </div>
    </div>
  );
};

export default StatCard;

================
File: client/src/app/dashboardWrapper.tsx
================
"use client";

import React, { useEffect } from "react";
import Navbar from "@/app/(components)/Navbar";
import Sidebar from "@/app/(components)/Sidebar";
import StoreProvider, { useAppSelector } from "./redux";

const DashboardLayout = ({ children }: { children: React.ReactNode }) => {
  const isSidebarCollapsed = useAppSelector(
    (state) => state.global.isSidebarCollapsed
  );
  const isDarkMode = useAppSelector((state) => state.global.isDarkMode);

  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.add("light");
    }
  });

  return (
    <div
      className={`${
        isDarkMode ? "dark" : "light"
      } flex bg-gray-50 text-gray-900 w-full min-h-screen`}
    >
      <Sidebar />
      <main
        className={`flex flex-col w-full h-full py-7 px-9 bg-gray-50 ${
          isSidebarCollapsed ? "md:pl-24" : "md:pl-72"
        }`}
      >
        <Navbar />
        {children}
      </main>
    </div>
  );
};

const DashboardWrapper = ({ children }: { children: React.ReactNode }) => {
  return (
    <StoreProvider>
      <DashboardLayout>{children}</DashboardLayout>
    </StoreProvider>
  );
};

export default DashboardWrapper;

================
File: client/src/app/expenses/page.tsx
================
"use client";

import {
  useGetInvoicesQuery,
  useGetVendorsQuery,
  useGetLocationsQuery,
} from "@/state/api";
import { useMemo, useState } from "react";
import Header from "@/app/(components)/Header";
import {
  Cell,
  Legend,
  Pie,
  PieChart,
  ResponsiveContainer,
  Tooltip,
} from "recharts";

type AggregatedDataItem = {
  name: string;
  color?: string;
  quantity: number;
  minimumStock?: number;
};

type AggregatedData = {
  [product: string]: AggregatedDataItem;
};

const Invoices = () => {
  const [activeIndex, setActiveIndex] = useState(0);
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [selectedVendor, setSelectedVendor] = useState("All");
  const [selectedLocation, setSelectedLocation] = useState("All");

  const {
    data: invoicesData,
    isLoading,
    isError,
  } = useGetInvoicesQuery({
    vendorId: selectedVendor,
    locationId: selectedLocation,
    startDate,
    endDate,
  });
  const { data: vendors } = useGetVendorsQuery();
  const { data: locations } = useGetLocationsQuery();

  const invoices = useMemo(() => invoicesData?.data ?? [], [invoicesData]);

  const parseDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toISOString().split("T")[0];
  };

  const aggregatedData: AggregatedDataItem[] = useMemo(() => {
    const filtered: AggregatedData = invoices
      .filter((invoice) => {
        const invoiceDate = parseDate(invoice.createdAt);
        const matchesDate =
          !startDate ||
          !endDate ||
          (invoiceDate >= startDate && invoiceDate <= endDate);

        const matchesVendor =
          selectedVendor === "All" ||
          invoice.items?.some(
            (item) => item?.product?.vendorId === selectedVendor
          );

        const matchesLocation =
          selectedLocation === "All" || invoice.locationId === selectedLocation;

        return matchesDate && matchesVendor && matchesLocation;
      })
      .reduce((acc: AggregatedData, invoice) => {
        invoice.items?.forEach((item) => {
          // Ensure item and item.product are defined
          if (item?.product) {
            const productName = item.product.name || "Unknown Product";
            const minimumStock = item.product.minimumStock || 0;

            if (!acc[productName]) {
              acc[productName] = {
                name: productName,
                quantity: 0,
                minimumStock,
                color: `#${Math.floor(Math.random() * 16777215).toString(16)}`,
              };
            }

            acc[productName].quantity += item.quantity;
          }
        });
        return acc;
      }, {});

    return Object.values(filtered);
  }, [invoices, startDate, endDate, selectedVendor, selectedLocation]);

  const classNames = {
    label: "block text-sm font-medium text-gray-700",
    selectInput:
      "mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md",
  };

  const handleLocationChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedLocation(e.target.value);
  };

  const handleVendorChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedVendor(e.target.value);
  };

  if (isLoading) {
    return <div className="py-4">Loading...</div>;
  }

  if (isError || !invoicesData) {
    return (
      <div className="text-center text-red-500 py-4">
        Failed to fetch invoices
      </div>
    );
  }

  return (
    <div>
      {/* HEADER */}
      <div className="mb-5">
        <Header name="Invoices" />
        <p className="text-sm text-gray-500">
          A visual representation of invoice items over time.
        </p>
      </div>

      {/* FILTERS */}
      <div className="flex flex-col md:flex-row justify-between gap-4">
        <div className="w-full md:w-1/3 bg-white shadow rounded-lg p-6">
          <h3 className="text-lg font-semibold mb-4">
            Filter by Vendor, Location, and Date
          </h3>
          <div className="space-y-4">
            {/* VENDOR FILTER */}
            <div>
              <label htmlFor="vendor" className={classNames.label}>
                Vendor
              </label>
              <select
                id="vendor"
                name="vendor"
                className={classNames.selectInput}
                onChange={handleVendorChange}
              >
                <option value="All">All</option>
                {vendors?.map((vendor) => (
                  <option key={vendor.vendorId} value={vendor.vendorId}>
                    {vendor.name}
                  </option>
                ))}
              </select>
            </div>

            {/* LOCATION FILTER (For Area Managers and Admins Only) */}
            <div>
              <label htmlFor="location" className={classNames.label}>
                Location
              </label>
              <select
                id="location"
                name="location"
                className={classNames.selectInput}
                onChange={handleLocationChange}
              >
                <option value="All">All</option>
                {locations?.map((location) => (
                  <option key={location.locationId} value={location.locationId}>
                    {location.name}
                  </option>
                ))}
              </select>
            </div>

            {/* START DATE */}
            <div>
              <label htmlFor="start-date" className={classNames.label}>
                Start Date
              </label>
              <input
                type="date"
                id="start-date"
                name="start-date"
                className={classNames.selectInput}
                onChange={(e) => setStartDate(e.target.value)}
              />
            </div>

            {/* END DATE */}
            <div>
              <label htmlFor="end-date" className={classNames.label}>
                End Date
              </label>
              <input
                type="date"
                id="end-date"
                name="end-date"
                className={classNames.selectInput}
                onChange={(e) => setEndDate(e.target.value)}
              />
            </div>
          </div>
        </div>
        {/* PIE CHART */}
        <div className="flex-grow bg-white shadow rounded-lg p-4 md:p-6">
          <ResponsiveContainer width="100%" height={400}>
            <PieChart>
              <Pie
                data={aggregatedData}
                cx="50%"
                cy="50%"
                label
                outerRadius={150}
                fill="#8884d8"
                dataKey="quantity"
                onMouseEnter={(_, index) => setActiveIndex(index)}
              >
                {aggregatedData.map(
                  (entry: AggregatedDataItem, index: number) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={
                        entry.quantity <= (entry.minimumStock ?? 0) // Default to 0 if minimumStock is undefined
                          ? "red" // Highlight in red if below or at minimum stock
                          : index === activeIndex
                          ? "rgb(29, 78, 216)" // Highlight the selected item
                          : entry.color // Default color for other items
                      }
                    />
                  )
                )}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );
};

export default Invoices;

================
File: client/src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

*,
*::before,
*::after {
  box-sizing: border-box;
}

html,
body,
#root,
.app {
  height: 100%;
  width: 100%;
  @apply text-sm;
  @apply bg-gray-500;
  @apply text-gray-900;
}

@media (min-width: 768px) {
  .custom-grid-rows {
    grid-template-rows: repeat(8, 20vh);
  }
}

@media (min-width: 1280px) {
  .custom-grid-rows {
    grid-template-rows: repeat(8, 7.5vh);
  }
}

================
File: client/src/app/inventory/page.tsx
================
"use client";

import { useGetVendorsQuery } from "@/state/api";
import Header from "@/app/(components)/Header";
import { DataGrid, GridColDef } from "@mui/x-data-grid";
import { Switch } from "@headlessui/react";
import { useState } from "react";

const columns: GridColDef[] = [
  { field: "vendorId", headerName: "ID", width: 90 },
  { field: "name", headerName: "Vendor Name", width: 200 },
  {
    field: "isActive",
    headerName: "Status",
    width: 130,
    renderCell: (params: any) => (
      <VendorStatusToggle
        isActive={params.row.isActive}
        vendorId={params.row.vendorId}
      />
    ),
  },
];

const VendorStatusToggle = ({
  isActive,
  vendorId,
}: {
  isActive: boolean;
  vendorId: string;
}) => {
  const [enabled, setEnabled] = useState(isActive);

  const handleToggle = () => {
    // Here you can implement the logic to update the vendor status via mutation
    setEnabled(!enabled);
    // Call your mutation to update vendor status in the backend
  };

  return (
    <Switch
      checked={enabled}
      onChange={handleToggle}
      className={`${
        enabled ? "bg-blue-600" : "bg-gray-300"
      } relative inline-flex items-center h-6 rounded-full w-11 transition-colors duration-200 ease-in-out`}
    >
      <span
        className={`${
          enabled ? "translate-x-6" : "translate-x-1"
        } inline-block w-4 h-4 transform bg-white rounded-full transition-transform duration-200 ease-in-out`}
      />
    </Switch>
  );
};

const Vendors = () => {
  const { data: vendors, isError, isLoading } = useGetVendorsQuery();

  if (isLoading) {
    return <div className="py-4">Loading...</div>;
  }

  if (isError || !vendors) {
    return (
      <div className="text-center text-red-500 py-4">
        Failed to fetch vendors
      </div>
    );
  }

  return (
    <div className="flex flex-col">
      <Header name="Vendors" />
      <DataGrid
        rows={vendors}
        columns={columns}
        getRowId={(row) => row.vendorId}
        checkboxSelection
        className="bg-white shadow rounded-lg border border-gray-200 mt-5 !text-gray-700"
      />
    </div>
  );
};

export default Vendors;

================
File: client/src/app/layout.tsx
================
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import DashboardWrapper from "./dashboardWrapper";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <DashboardWrapper>{children}</DashboardWrapper>
      </body>
    </html>
  );
}

================
File: client/src/app/page.tsx
================
import Dashboard from "@/app/dashboard/page";

export default function Home() {
  return <Dashboard />;
}

================
File: client/src/app/products/CreateProductModal.tsx
================
import React, { ChangeEvent, FormEvent, useState } from "react";
import { v4 } from "uuid";
import Header from "@/app/(components)/Header";

type ProductFormData = {
  name: string;
  chineseName?: string;
  price: number;
  minimumStock?: number;
  vendorId?: string;
};

type CreateProductModalProps = {
  isOpen: boolean;
  onClose: () => void;
  onCreate: (formData: ProductFormData) => void;
};

const CreateProductModal = ({
  isOpen,
  onClose,
  onCreate,
}: CreateProductModalProps) => {
  const [formData, setFormData] = useState({
    productId: v4(),
    name: "",
    chineseName: "",
    price: 0,
    minimumStock: 0,
    vendorId: "",
  });

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]:
        name === "price" || name === "minimumStock" ? parseFloat(value) : value,
    });
  };

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    onCreate(formData);
    onClose();
  };

  if (!isOpen) return null;

  const labelCssStyles = "block text-sm font-medium text-gray-700";
  const inputCssStyles =
    "block w-full mb-2 p-2 border-gray-500 border-2 rounded-md";

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-20">
      <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <Header name="Create New Product" />
        <form onSubmit={handleSubmit} className="mt-5">
          {/* PRODUCT NAME */}
          <label htmlFor="productName" className={labelCssStyles}>
            Product Name
          </label>
          <input
            type="text"
            name="name"
            placeholder="Name"
            onChange={handleChange}
            value={formData.name}
            className={inputCssStyles}
            required
          />

          {/* CHINESE NAME */}
          <label htmlFor="chineseName" className={labelCssStyles}>
            Chinese Name (Optional)
          </label>
          <input
            type="text"
            name="chineseName"
            placeholder="Chinese Name"
            onChange={handleChange}
            value={formData.chineseName}
            className={inputCssStyles}
          />

          {/* PRICE */}
          <label htmlFor="productPrice" className={labelCssStyles}>
            Price
          </label>
          <input
            type="number"
            name="price"
            placeholder="Price"
            onChange={handleChange}
            value={formData.price}
            className={inputCssStyles}
            required
          />

          {/* MINIMUM STOCK */}
          <label htmlFor="minimumStock" className={labelCssStyles}>
            Minimum Stock (Optional)
          </label>
          <input
            type="number"
            name="minimumStock"
            placeholder="Minimum Stock"
            onChange={handleChange}
            value={formData.minimumStock}
            className={inputCssStyles}
          />

          {/* VENDOR ID */}
          <label htmlFor="vendorId" className={labelCssStyles}>
            Vendor ID (Optional)
          </label>
          <input
            type="text"
            name="vendorId"
            placeholder="Vendor ID"
            onChange={handleChange}
            value={formData.vendorId}
            className={inputCssStyles}
          />

          {/* CREATE ACTIONS */}
          <button
            type="submit"
            className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700"
          >
            Create
          </button>
          <button
            onClick={onClose}
            type="button"
            className="ml-2 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-700"
          >
            Cancel
          </button>
        </form>
      </div>
    </div>
  );
};

export default CreateProductModal;

================
File: client/src/app/products/page.tsx
================
"use client";

import { useCreateProductMutation, useGetProductsQuery } from "@/state/api";
import { PlusCircleIcon, SearchIcon } from "lucide-react";
import { useState } from "react";
import Header from "@/app/(components)/Header";
import CreateProductModal from "./CreateProductModal";
import Image from "next/image";

type ProductFormData = {
  name: string;
  chineseName?: string;
  price: number;
  minimumStock?: number;
  vendorId?: string;
};

const Products = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);

  const {
    data: products,
    isLoading,
    isError,
  } = useGetProductsQuery({ search: searchTerm });

  const [createProduct] = useCreateProductMutation();
  const handleCreateProduct = async (productData: ProductFormData) => {
    await createProduct(productData);
  };

  if (isLoading) {
    return <div className="py-4">Loading...</div>;
  }

  if (isError || !products) {
    return (
      <div className="text-center text-red-500 py-4">
        Failed to fetch products
      </div>
    );
  }

  return (
    <div className="mx-auto pb-5 w-full">
      {/* SEARCH BAR */}
      <div className="mb-6">
        <div className="flex items-center border-2 border-gray-200 rounded">
          <SearchIcon className="w-5 h-5 text-gray-500 m-2" />
          <input
            className="w-full py-2 px-4 rounded bg-white"
            placeholder="Search products..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>

      {/* HEADER BAR */}
      <div className="flex justify-between items-center mb-6">
        <Header name="Products" />
        <button
          className="flex items-center bg-blue-500 hover:bg-blue-700 text-gray-200 font-bold py-2 px-4 rounded"
          onClick={() => setIsModalOpen(true)}
        >
          <PlusCircleIcon className="w-5 h-5 mr-2 !text-gray-200" /> Create
          Product
        </button>
      </div>

      {/* BODY PRODUCTS LIST */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg-grid-cols-3 gap-10 justify-between">
        {products?.data.map((product) => (
          <div
            key={product.productId}
            className="border shadow rounded-md p-4 max-w-full w-full mx-auto"
          >
            <div className="flex flex-col items-center">
              <h3 className="text-lg text-gray-900 font-semibold">
                {product.name}
              </h3>
              {product.chineseName && (
                <p className="text-gray-800">{product.chineseName}</p>
              )}
              <p className="text-gray-800">${product.price.toFixed(2)}</p>
              {product.minimumStock && (
                <div className="text-sm text-gray-600 mt-1">
                  Minimum Stock: {product.minimumStock}
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* MODAL */}
      <CreateProductModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onCreate={handleCreateProduct}
      />
    </div>
  );
};

export default Products;

================
File: client/src/app/redux.tsx
================
import { useRef } from "react";
import { combineReducers, configureStore } from "@reduxjs/toolkit";
import {
  TypedUseSelectorHook,
  useDispatch,
  useSelector,
  Provider,
} from "react-redux";
import globalReducer from "@/state";
import { api } from "@/state/api";
import { setupListeners } from "@reduxjs/toolkit/query";

import {
  persistStore,
  persistReducer,
  FLUSH,
  REHYDRATE,
  PAUSE,
  PERSIST,
  PURGE,
  REGISTER,
} from "redux-persist";
import { PersistGate } from "redux-persist/integration/react";
import createWebStorage from "redux-persist/lib/storage/createWebStorage";

/* REDUX PERSISTENCE */
const createNoopStorage = () => {
  return {
    getItem(_key: any) {
      return Promise.resolve(null);
    },
    setItem(_key: any, value: any) {
      return Promise.resolve(value);
    },
    removeItem(_key: any) {
      return Promise.resolve();
    },
  };
};

const storage =
    typeof window === "undefined"
        ? createNoopStorage()
        : createWebStorage("local");

const persistConfig = {
  key: "root",
  storage,
  whitelist: ["global"],
};
const rootReducer = combineReducers({
  global: globalReducer,
  [api.reducerPath]: api.reducer,
});
const persistedReducer = persistReducer(persistConfig, rootReducer);

/* REDUX STORE */
export const makeStore = () => {
  return configureStore({
    reducer: persistedReducer,
    middleware: (getDefaultMiddleware) =>
        getDefaultMiddleware({
          serializableCheck: {
            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],
          },
        }).concat(api.middleware),
  });
};

/* REDUX TYPES */
export type AppStore = ReturnType<typeof makeStore>;
export type RootState = ReturnType<AppStore["getState"]>;
export type AppDispatch = AppStore["dispatch"];
export const useAppDispatch = () => useDispatch<AppDispatch>();
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

/* PROVIDER */
export default function StoreProvider({
                                        children,
                                      }: {
  children: React.ReactNode;
}) {
  const storeRef = useRef<AppStore>();
  if (!storeRef.current) {
    storeRef.current = makeStore();
    setupListeners(storeRef.current.dispatch);
  }
  const persistor = persistStore(storeRef.current);

  return (
      <Provider store={storeRef.current}>
        <PersistGate loading={null} persistor={persistor}>
          {children}
        </PersistGate>
      </Provider>
  );
}

================
File: client/src/app/settings/page.tsx
================
"use client";

import React, { useState, useEffect } from "react";
import Header from "@/app/(components)/Header";
import { useGetUsersQuery } from "@/state/api"; // Assuming we fetch user data from API

type UserSetting = {
  label: string;
  value: string | boolean;
  type: "text" | "toggle";
};

const mockSettings: UserSetting[] = [
  { label: "Username", value: "john_doe", type: "text" },
  { label: "Email", value: "john.doe@example.com", type: "text" },
  { label: "Notification", value: true, type: "toggle" },
  { label: "Dark Mode", value: false, type: "toggle" },
  { label: "Language", value: "English", type: "text" },
];

const Settings = () => {
  const [userSettings, setUserSettings] = useState<UserSetting[]>(mockSettings);
  const { data: usersData } = useGetUsersQuery(); // Fetch all users

  // Select a specific user (e.g., the first user for now)
  const currentUser = usersData ? usersData[0] : null; // Replace this logic to select the current logged-in user

  // Safely access the role of the current user
  const userRole = currentUser?.role;

  const handleToggleChange = (index: number) => {
    const settingsCopy = [...userSettings];
    settingsCopy[index].value = !settingsCopy[index].value as boolean;
    setUserSettings(settingsCopy);
  };

  // Update settings based on user role or backend data
  useEffect(() => {
    if (userRole === "ADMIN") {
      const adminSettings: UserSetting[] = [
        { label: "Vendor Management Access", value: true, type: "toggle" },
        { label: "Invoice Alerts", value: true, type: "toggle" },
      ];
      setUserSettings((prev) => [...prev, ...adminSettings]);
    }
  }, [userRole]);

  if (!currentUser) {
    return <div>Loading...</div>; // Handle loading state until the user data is fetched
  }

  return (
    <div className="w-full">
      <Header name="User Settings" />
      <div className="overflow-x-auto mt-5 shadow-md">
        <table className="min-w-full bg-white rounded-lg">
          <thead className="bg-gray-800 text-white">
            <tr>
              <th className="text-left py-3 px-4 uppercase font-semibold text-sm">
                Setting
              </th>
              <th className="text-left py-3 px-4 uppercase font-semibold text-sm">
                Value
              </th>
            </tr>
          </thead>
          <tbody>
            {userSettings.map((setting, index) => (
              <tr className="hover:bg-blue-50" key={setting.label}>
                <td className="py-2 px-4">{setting.label}</td>
                <td className="py-2 px-4">
                  {setting.type === "toggle" ? (
                    <label className="inline-flex relative items-center cursor-pointer">
                      <input
                        type="checkbox"
                        className="sr-only peer"
                        checked={setting.value as boolean}
                        onChange={() => handleToggleChange(index)}
                      />
                      <div
                        className="w-11 h-6 bg-gray-200 rounded-full peer peer-focus:ring-blue-400 peer-focus:ring-4 
                        transition peer-checked:after:translate-x-full peer-checked:after:border-white 
                        after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white 
                        after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all
                        peer-checked:bg-blue-600"
                      ></div>
                    </label>
                  ) : (
                    <input
                      type="text"
                      className="px-4 py-2 border rounded-lg text-gray-500 focus:outline-none focus:border-blue-500"
                      value={setting.value as string}
                      onChange={(e) => {
                        const settingsCopy = [...userSettings];
                        settingsCopy[index].value = e.target.value;
                        setUserSettings(settingsCopy);
                      }}
                    />
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Settings;

================
File: client/src/app/users/page.tsx
================
"use client";

import { useGetUsersQuery } from "@/state/api";
import Header from "@/app/(components)/Header";
import { DataGrid, GridColDef } from "@mui/x-data-grid";

const columns: GridColDef[] = [
  { field: "userId", headerName: "ID", width: 90 },
  { field: "name", headerName: "Name", width: 200 },
  { field: "email", headerName: "Email", width: 200 },
];

const Users = () => {
  const { data: users, isError, isLoading } = useGetUsersQuery();

  if (isLoading) {
    return <div className="py-4">Loading...</div>;
  }

  if (isError || !users) {
    return (
      <div className="text-center text-red-500 py-4">Failed to fetch users</div>
    );
  }

  return (
    <div className="flex flex-col">
      <Header name="Users" />
      <DataGrid
        rows={users}
        columns={columns}
        getRowId={(row) => row.userId}
        checkboxSelection
        className="bg-white shadow rounded-lg border border-gray-200 mt-5 !text-gray-700"
      />
    </div>
  );
};

export default Users;

================
File: client/src/state/api.ts
================
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

export type Role = "MANAGER" | "AREA_MANAGER" | "ADMIN";

export type InvoiceStatus =
  | "PENDING"
  | "APPROVED"
  | "REJECTED"
  | "SENT_TO_VENDOR";

export interface User {
  userId: string;
  name: string;
  email: string;
  password: string;
  role: Role;
  locationId?: string;
  invoices?: Invoice[];
  location?: Location;
}

export interface Vendor {
  vendorId: string;
  name: string;
  isActive: boolean;
  products?: Product[];
}

export interface ProductStockLevel {
  id: string;
  productId: string;
  locationId: string;
  stockQuantity: number;
  product?: Product;
  location?: Location;
}

export interface InvoiceItem {
  invoiceItemId: string;
  invoiceId: string;
  productId: string;
  quantity: number;
  amount: number;
  product?: Product;
}

export interface Invoice {
  invoiceId: string;
  managerId: string;
  locationId: string;
  createdAt: string; // or Date
  status: InvoiceStatus;
  items?: InvoiceItem[];
  manager?: User;
  location?: Location;
}

export interface Location {
  locationId: string;
  name: string;
  managers?: User[];
  stockLevels?: ProductStockLevel[];
  invoices?: Invoice[];
}

export interface Product {
  productId: string;
  name: string;
  chineseName?: string;
  price: number;
  minimumStock?: number;
  vendorId?: string;
  vendor?: Vendor;
  stockLevels?: ProductStockLevel[];
  invoiceItems?: InvoiceItem[];
  stockQuantity?: number; // Total stock quantity calculated from stockLevels
}

export interface NewProduct {
  name: string;
  chineseName?: string;
  price: number;
  minimumStock?: number;
  vendorId?: string;
}

export interface Pagination {
  totalInvoices: number;
  currentPage: number;
  totalPages: number;
  pageSize: number;
}

export interface InvoicesResponse {
  data: Invoice[];
  pagination: Pagination;
}

export interface GetInvoicesParams {
  page?: number;
  limit?: number;
  startDate?: string;
  endDate?: string;
  vendorId?: string;
  locationId?: string;
  status?: string;
}

export interface ProductsResponse {
  data: Product[]; // Array of products
  pagination: Pagination; // Pagination details
}

export interface GetProductsParams {
  page?: number; // Page number for pagination
  limit?: number; // Number of items per page
  search?: string; // Search term for filtering products
  sortBy?: string; // Sorting field (e.g., name, price)
  sortOrder?: "asc" | "desc"; // Sorting order (ascending or descending)
}

export const api = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: process.env.NEXT_PUBLIC_API_BASE_URL }),
  reducerPath: "api",
  tagTypes: ["Products", "Users", "Invoices", "Vendors", "Locations"],
  endpoints: (build) => ({
    // Fetch low stock products
    getLowStockProducts: build.query<
      ProductsResponse,
      GetProductsParams | void
    >({
      query: (params) => ({
        url: "/products/low-stock",
        params: params ? params : {},
      }),
      providesTags: ["Products"],
    }),

    // Fetch all products
    getProducts: build.query<ProductsResponse, GetProductsParams | void>({
      query: (params) => ({
        url: "/products",
        params: params ? params : {},
      }),
      providesTags: ["Products"],
    }),

    // Create a new product
    createProduct: build.mutation<Product, NewProduct>({
      query: (newProduct) => ({
        url: "/products",
        method: "POST",
        body: newProduct,
      }),
      invalidatesTags: ["Products"],
    }),

    // Fetch all users
    getUsers: build.query<User[], void>({
      query: () => "/users",
      providesTags: ["Users"],
    }),

    // Fetch invoices
    getInvoices: build.query<InvoicesResponse, GetInvoicesParams | void>({
      query: (params) => ({
        url: "/invoices",
        params: params ? params : {},
      }),
      providesTags: ["Invoices"],
    }),

    // Fetch vendors for filtering
    getVendors: build.query<Vendor[], void>({
      query: () => "/vendors",
      providesTags: ["Vendors"],
    }),

    // Fetch locations for filtering
    getLocations: build.query<Location[], void>({
      query: () => "/locations",
      providesTags: ["Locations"],
    }),
  }),
});

export const {
  useGetLowStockProductsQuery,
  useGetProductsQuery,
  useCreateProductMutation,
  useGetUsersQuery,
  useGetInvoicesQuery, // <--- New Hook for fetching invoices
  useGetVendorsQuery, // <--- New Hook for fetching vendors
  useGetLocationsQuery, // <--- New Hook for fetching locations
} = api;

================
File: client/src/state/globalSlice.ts
================
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface GlobalState {
    language: "en" | "zh";
}

const initialState: GlobalState = {
    language: "en", // default to English
};

const globalSlice = createSlice({
    name: "global",
    initialState,
    reducers: {
        toggleLanguage: (state) => {
            state.language = state.language === "en" ? "zh" : "en"; // Toggle between English and Chinese
        },
        setLanguage: (state, action: PayloadAction<"en" | "zh">) => {
            state.language = action.payload;
        },
    },
});

export const { toggleLanguage, setLanguage } = globalSlice.actions;
export default globalSlice.reducer;

================
File: client/src/state/index.ts
================
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface InitialStateTypes {
  isSidebarCollapsed: boolean;
  isDarkMode: boolean;
}

const initialState: InitialStateTypes = {
  isSidebarCollapsed: false,
  isDarkMode: false,
};

export const globalSlice = createSlice({
  name: "global",
  initialState,
  reducers: {
    setIsSidebarCollapsed: (state, action: PayloadAction<boolean>) => {
      state.isSidebarCollapsed = action.payload;
    },
    setIsDarkMode: (state, action: PayloadAction<boolean>) => {
      state.isDarkMode = action.payload;
    },
  },
});

export const { setIsSidebarCollapsed, setIsDarkMode } = globalSlice.actions;

export default globalSlice.reducer;

================
File: client/tailwind.config.ts
================
import type { Config } from "tailwindcss";
import { createThemes } from "tw-colors";
import colors from "tailwindcss/colors";

const baseColors = [
  "gray",
  "red",
  "yellow",
  "green",
  "blue",
  "indigo",
  "purple",
  "pink",
];

const shadeMapping = {
  "50": "900",
  "100": "800",
  "200": "700",
  "300": "600",
  "400": "500",
  "500": "400",
  "600": "300",
  "700": "200",
  "800": "100",
  "900": "50",
};

const generateThemeObject = (colors: any, mapping: any, invert = false) => {
  const theme: any = {};
  baseColors.forEach((color) => {
    theme[color] = {};
    Object.entries(mapping).forEach(([key, value]: any) => {
      const shadeKey = invert ? value : key;
      theme[color][key] = colors[color][shadeKey];
    });
  });
  return theme;
};

const lightTheme = generateThemeObject(colors, shadeMapping);
const darkTheme = generateThemeObject(colors, shadeMapping, true);

const themes = {
  light: {
    ...lightTheme,
    white: "#ffffff",
  },
  dark: {
    ...darkTheme,
    white: colors.gray["950"],
    black: colors.gray["50"],
  },
};

const config: Config = {
  darkMode: "class",
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [createThemes(themes)],
};

export default config;

================
File: client/tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: server/.gitignore
================
node_modules
# Keep environment variables out of version control
.env

================
File: server/aws-ec2-instructions.md
================
# EC2 Setup Instructions

## 1. Connect to EC2 Instance via EC2 Instance Connect

## 2. Install Node Version Manager (nvm) and Node.js

- **Switch to superuser and install nvm:**

```
sudo su -
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
```

- **Activate nvm:**

```
. ~/.nvm/nvm.sh
```

- **Install the latest version of Node.js using nvm:**

```
nvm install node
```

- **Verify that Node.js and npm are installed:**

```
node -v
npm -v
```

## 3. Install Git

- **Update the system and install Git:**

```
sudo yum update -y
sudo yum install git -y
```

- **Check Git version:**

```
git --version
```

- **Clone your code repository from GitHub:**

```
git clone [your-github-link]
```

- **Navigate to the directory and install packages:**

```
cd inventory-management
npm i
```

- **Create Env File and Port 80:**

```
echo "PORT=80" > .env
```

- **Start the application:**

```
npm start
```

## 4. Install pm2 (Production Process Manager for Node.js)

- **Install pm2 globally:**

```
npm i pm2 -g
```

- **Create a pm2 ecosystem configuration file (inside server directory):**

```
module.exports = { apps : [{ name: 'inventory-management', script: 'npm', args: 'run dev', env: { NODE_ENV: 'development', ENV_VAR1: 'environment-variable', } }], };
```

- **Modify the ecosystem file if necessary:**

```
nano ecosystem.config.js
```

- **Set pm2 to restart automatically on system reboot:**

```
sudo env PATH=$PATH:$(which node) $(which pm2) startup systemd -u $USER --hp $(eval echo ~$USER)
```

- **Start the application using the pm2 ecosystem configuration:**

```
pm2 start ecosystem.config.js
```

- **Useful pm2 commands:**

  - **Stop all processes:**

  ```
  pm2 stop all
  ```

  - **Delete all processes:**

  ```
  pm2 delete all
  ```

  - **Check status of processes:**

  ```
  pm2 status
  ```

  - **Monitor processes:**

  ```
  pm2 monit
  ```

================
File: server/ecosystem.config.js
================
module.exports = {
  apps: [
    {
      name: "SJVenturesInventoryManagement",
      script: "npm",
      args: "run dev",
      env: {
        NODE_ENV: "development",
        ENV_VAR1: "environment-variable",
      },
    },
  ],
};

================
File: server/package.json
================
{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "seed": "ts-node prisma/seed.ts",
    "build": "rimraf dist && npx tsc",
    "start": "npm run build && node dist/index.js",
    "dev": "npm run build && concurrently \"npx tsc -w\" \"nodemon --exec ts-node src/index.ts\""
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@prisma/client": "^5.20.0",
    "bcrypt": "^5.1.1",
    "body-parser": "1.20.3",
    "concurrently": "^8.2.2",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "5.0.0",
    "helmet": "^7.1.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.0",
    "prisma": "^5.16.2",
    "rimraf": "^6.0.1"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.2",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/jsonwebtoken": "^9.0.7",
    "@types/morgan": "^1.9.9",
    "@types/node": "^20.14.10",
    "nodemon": "^3.1.4",
    "ts-node": "^10.9.2",
    "typescript": "^5.5.3"
  }
}

================
File: server/prisma/migrations/20240711174419_init/migration.sql
================
-- CreateTable
CREATE TABLE "Users" (
    "userId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "email" TEXT NOT NULL,

    CONSTRAINT "Users_pkey" PRIMARY KEY ("userId")
);

-- CreateTable
CREATE TABLE "Products" (
    "productId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "price" DOUBLE PRECISION NOT NULL,
    "rating" DOUBLE PRECISION,
    "stockQuantity" INTEGER NOT NULL,

    CONSTRAINT "Products_pkey" PRIMARY KEY ("productId")
);

-- CreateTable
CREATE TABLE "Sales" (
    "saleId" TEXT NOT NULL,
    "productId" TEXT NOT NULL,
    "timestamp" TIMESTAMP(3) NOT NULL,
    "quantity" INTEGER NOT NULL,
    "unitPrice" DOUBLE PRECISION NOT NULL,
    "totalAmount" DOUBLE PRECISION NOT NULL,

    CONSTRAINT "Sales_pkey" PRIMARY KEY ("saleId")
);

-- CreateTable
CREATE TABLE "Purchases" (
    "purchaseId" TEXT NOT NULL,
    "productId" TEXT NOT NULL,
    "timestamp" TIMESTAMP(3) NOT NULL,
    "quantity" INTEGER NOT NULL,
    "unitCost" DOUBLE PRECISION NOT NULL,
    "totalCost" DOUBLE PRECISION NOT NULL,

    CONSTRAINT "Purchases_pkey" PRIMARY KEY ("purchaseId")
);

-- CreateTable
CREATE TABLE "Expenses" (
    "expenseId" TEXT NOT NULL,
    "category" TEXT NOT NULL,
    "amount" DOUBLE PRECISION NOT NULL,
    "timestamp" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Expenses_pkey" PRIMARY KEY ("expenseId")
);

-- CreateTable
CREATE TABLE "SalesSummary" (
    "salesSummaryId" TEXT NOT NULL,
    "totalValue" DOUBLE PRECISION NOT NULL,
    "changePercentage" DOUBLE PRECISION,
    "date" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "SalesSummary_pkey" PRIMARY KEY ("salesSummaryId")
);

-- CreateTable
CREATE TABLE "PurchaseSummary" (
    "purchaseSummaryId" TEXT NOT NULL,
    "totalPurchased" DOUBLE PRECISION NOT NULL,
    "changePercentage" DOUBLE PRECISION,
    "date" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "PurchaseSummary_pkey" PRIMARY KEY ("purchaseSummaryId")
);

-- CreateTable
CREATE TABLE "ExpenseSummary" (
    "expenseSummaryId" TEXT NOT NULL,
    "totalExpenses" DOUBLE PRECISION NOT NULL,
    "date" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "ExpenseSummary_pkey" PRIMARY KEY ("expenseSummaryId")
);

-- CreateTable
CREATE TABLE "ExpenseByCategory" (
    "expenseByCategoryId" TEXT NOT NULL,
    "expenseSummaryId" TEXT NOT NULL,
    "category" TEXT NOT NULL,
    "amount" BIGINT NOT NULL,
    "date" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "ExpenseByCategory_pkey" PRIMARY KEY ("expenseByCategoryId")
);

-- AddForeignKey
ALTER TABLE "Sales" ADD CONSTRAINT "Sales_productId_fkey" FOREIGN KEY ("productId") REFERENCES "Products"("productId") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Purchases" ADD CONSTRAINT "Purchases_productId_fkey" FOREIGN KEY ("productId") REFERENCES "Products"("productId") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ExpenseByCategory" ADD CONSTRAINT "ExpenseByCategory_expenseSummaryId_fkey" FOREIGN KEY ("expenseSummaryId") REFERENCES "ExpenseSummary"("expenseSummaryId") ON DELETE RESTRICT ON UPDATE CASCADE;

================
File: server/prisma/migrations/migration_lock.toml
================
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"

================
File: server/prisma/schema.prisma
================
// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MANAGER
  AREA_MANAGER
  ADMIN
}

enum InvoiceStatus {
  PENDING
  APPROVED
  REJECTED
  SENT_TO_VENDOR
}

model User {
  userId     String    @id @default(cuid())
  name       String
  email      String    @unique
  password   String
  role       Role      @default(MANAGER)
  location   Location? @relation(fields: [locationId], references: [locationId])
  locationId String?
  invoices   Invoice[]

  // Relations
  // managers can create invoices
  // admins handle invoice approval and sending to vendors
}

model Location {
  locationId   String              @id @default(cuid())
  name         String              @unique
  managers     User[]
  stockLevels  ProductStockLevel[]
  invoices     Invoice[]
}

model Vendor {
  vendorId  String     @id @default(cuid())
  name      String
  isActive  Boolean    @default(true)
  products  Product[]
}

model Product {
  productId     String                @id @default(cuid())
  name          String
  chineseName   String?
  price         Float
  minimumStock  Int?
  vendor        Vendor?               @relation(fields: [vendorId], references: [vendorId])
  vendorId      String?
  stockLevels   ProductStockLevel[]
  invoiceItems  InvoiceItem[]
}

model ProductStockLevel {
  id           String     @id @default(cuid())
  product      Product   @relation(fields: [productId], references: [productId])
  productId    String
  location     Location  @relation(fields: [locationId], references: [locationId])
  locationId   String
  stockQuantity Int
}

model Invoice {
  invoiceId   String       @id @default(cuid())
  manager     User         @relation(fields: [managerId], references: [userId])
  managerId   String
  location    Location     @relation(fields: [locationId], references: [locationId])
  locationId  String
  createdAt   DateTime     @default(now())
  status      InvoiceStatus @default(PENDING)
  items       InvoiceItem[]
}

model InvoiceItem {
  invoiceItemId String    @id @default(cuid())
  invoice       Invoice   @relation(fields: [invoiceId], references: [invoiceId])
  invoiceId     String
  product       Product   @relation(fields: [productId], references: [productId])
  productId     String
  quantity      Int
  amount        Float     // Add this field to store price * quantity
}

================
File: server/prisma/seed.ts
================
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";
import fs from "fs";
import path from "path";

const prisma = new PrismaClient();

async function deleteAllData(orderedFileNames: string[]) {
  const modelNames = orderedFileNames.map((fileName) => {
    const modelName = path.basename(fileName, path.extname(fileName));
    return modelName.charAt(0).toLowerCase() + modelName.slice(1);
  });

  // Reverse the order for deletion to handle dependencies
  for (const modelName of modelNames.reverse()) {
    const model = (prisma as any)[modelName];
    if (model && typeof model.deleteMany === "function") {
      await model.deleteMany({});
      console.log(`Cleared data from ${modelName}`);
    } else {
      console.error(
          `Model ${modelName} not found. Please ensure the model name is correctly specified.`
      );
    }
  }
}

async function main() {
  const dataDirectory = path.join(__dirname, "seedData");

  const orderedFileNames = [
    "location.json", // Seed locations first
    "user.json",     // Then seed users
    "vendor.json",
    "product.json",
    "productStockLevel.json",
    "invoice.json",
    "invoiceItem.json",
  ];

  await deleteAllData(orderedFileNames);

  // Seed Locations first
  const locationsFilePath = path.join(dataDirectory, "location.json");
  if (fs.existsSync(locationsFilePath)) {
    const locationsData = JSON.parse(fs.readFileSync(locationsFilePath, "utf-8"));
    for (const location of locationsData) {
      try {
        await prisma.location.create({
          data: location,
        });
      } catch (error) {
        console.error(`Error seeding Locations:`, error);
      }
    }
    console.log(`Seeded Locations with data from locations.json`);
  } else {
    console.error(`File not found: locations.json`);
  }

  // Seed Users with password hashing after locations
  const usersFilePath = path.join(dataDirectory, "users.json");
  if (fs.existsSync(usersFilePath)) {
    const usersData = JSON.parse(fs.readFileSync(usersFilePath, "utf-8"));
    for (const user of usersData) {
      // Hash the password before seeding
      user.password = await bcrypt.hash(user.password, 10);
    }
    for (const user of usersData) {
      try {
        await prisma.user.create({
          data: user,
        });
      } catch (error) {
        console.error(`Error seeding Users:`, error);
      }
    }
    console.log(`Seeded Users with data from users.json`);
  } else {
    console.error(`File not found: users.json`);
  }

  // Seed the rest of the data
  for (const fileName of orderedFileNames.slice(2)) { // Start after users.json
    const filePath = path.join(dataDirectory, fileName);
    if (!fs.existsSync(filePath)) {
      console.error(`File not found: ${fileName}`);
      continue;
    }

    const jsonData = JSON.parse(fs.readFileSync(filePath, "utf-8"));
    const modelName = path.basename(fileName, path.extname(fileName));
    const prismaModelName =
        modelName.charAt(0).toLowerCase() + modelName.slice(1);

    const model = (prisma as any)[prismaModelName];

    if (model && typeof model.createMany === "function") {
      try {
        await model.createMany({
          data: jsonData,
        });
        console.log(`Seeded ${modelName} with data from ${fileName}`);
      } catch (error) {
        console.error(`Error seeding ${modelName}:`, error);
      }
    } else {
      console.error(
          `Model ${modelName} not found or createMany not supported. Please ensure the model name is correctly specified.`
      );
    }
  }
}

main()
    .catch((e) => {
      console.error(e);
      process.exit(1);
    })
    .finally(async () => {
      await prisma.$disconnect();
    });

================
File: server/prisma/seedData/invoice.json
================
[
  {
    "invoiceId": "invoice-id-1",
    "managerId": "u1",
    "locationId": "l1",
    "createdAt": "2023-10-10T00:00:00.000Z",
    "status": "PENDING"
  }
]

================
File: server/prisma/seedData/invoiceItem.json
================
[
  {
    "invoiceItemId": "invoice-item-id-1",
    "invoiceId": "invoice-id-1",
    "productId": "product-id-1",
    "quantity": 10,
    "amount": 100.00
  }
]

================
File: server/prisma/seedData/location.json
================
[
  {
    "locationId": "l1",
    "name": "Warehouse"
  },
  {
    "locationId": "l2",
    "name": "Store 1"
  }
]

================
File: server/prisma/seedData/locations.json
================
[
  {
    "locationId": "l1",
    "name": "Warehouse"
  },
  {
    "locationId": "l2",
    "name": "Store 1"
  }
]

================
File: server/prisma/seedData/product.json
================
[
  {
    "productId": "product-id-1",
    "name": "Product 1",
    "chineseName": "产品一",
    "price": 10.0,
    "minimumStock": 5,
    "vendorId": "vendor-id-1"
  },
  {
    "productId": "product-id-2",
    "name": "Product 2",
    "chineseName": "产品二",
    "price": 15.0,
    "minimumStock": 10,
    "vendorId": "vendor-id-2"
  },
  {
    "productId": "product-id-3",
    "name": "Product 3",
    "price": 20.0,
    "minimumStock": 7,
    "vendorId": null
  }
]

================
File: server/prisma/seedData/productStockLevel.json
================
[
  {
    "id": "stock-level-id-1",
    "productId": "product-id-1",
    "locationId": "l1",
    "stockQuantity": 100
  },
  {
    "id": "stock-level-id-2",
    "productId": "product-id-1",
    "locationId": "l1",
    "stockQuantity": 20
  }
]

================
File: server/prisma/seedData/user.json
================
[
  {
    "userId": "u1",
    "name": "John Doe",
    "email": "john@example.com",
    "password": "hashedpassword123",
    "role": "ADMIN",
    "locationId": "l1"
  },
  {
    "userId": "u2",
    "name": "Jane Smith",
    "email": "jane@example.com",
    "password": "hashedpassword456",
    "role": "MANAGER",
    "locationId": "l2"
  }
]

================
File: server/prisma/seedData/users.json
================
[
  {
    "userId": "u1",
    "name": "John Doe",
    "email": "john@example.com",
    "password": "hashedpassword123",
    "role": "ADMIN",
    "locationId": "l1"
  },
  {
    "userId": "u2",
    "name": "Jane Smith",
    "email": "jane@example.com",
    "password": "hashedpassword456",
    "role": "MANAGER",
    "locationId": "l2"
  }
]

================
File: server/prisma/seedData/vendor.json
================
[
  {
    "vendorId": "vendor-id-1",
    "name": "Vendor 1",
    "isActive": true
  },
  {
    "vendorId": "vendor-id-2",
    "name": "Vendor 2",
    "isActive": true
  }
]

================
File: server/src/controllers/dashboardController.ts
================
// controllers/dashboardController.ts

import { Request, Response } from "express";
import { PrismaClient, Product, ProductStockLevel } from "@prisma/client";

const prisma = new PrismaClient();

export const getLowStockProducts = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const products = await prisma.product.findMany({
      where: {
        minimumStock: {
          not: null,
        },
      },
      include: {
        stockLevels: true, // Include stockLevels in the query
      },
    });

    const lowStockProducts = products.filter((product) => {
      const totalStockQuantity = product.stockLevels.reduce(
        (total, stockLevel) => total + stockLevel.stockQuantity,
        0
      );
      return totalStockQuantity <= (product.minimumStock || 0);
    });

    res.json(lowStockProducts);
  } catch (error) {
    console.error("Error retrieving low stock products:", error);
    res.status(500).json({ message: "Error retrieving low stock products" });
  }
};

================
File: server/src/controllers/expenseController.ts
================
// controllers/expenseController.ts

import { Request, Response } from "express";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export const getExpenseSummary = async (
  req: Request,
  res: Response
): Promise<Response | void> => {
  try {
    const { locationId, period } = req.query;

    // Validate period
    const validPeriods = ["week", "month", "quarter"];
    const selectedPeriod = validPeriods.includes(period as string)
      ? (period as string)
      : "month";

    // Calculate date range
    const dateFrom = new Date();
    switch (selectedPeriod) {
      case "week":
        dateFrom.setDate(dateFrom.getDate() - 7);
        break;
      case "month":
        dateFrom.setMonth(dateFrom.getMonth() - 1);
        break;
      case "quarter":
        dateFrom.setMonth(dateFrom.getMonth() - 3);
        break;
    }

    // Ensure locationId is provided
    if (!locationId) {
      return res.status(400).json({ message: "Location ID is required" });
    }

    // Fetch invoice items for the location and period
    const invoiceItems = await prisma.invoiceItem.findMany({
      where: {
        invoice: {
          locationId: locationId as string,
          createdAt: {
            gte: dateFrom,
          },
        },
      },
      include: {
        product: {
          select: {
            price: true,
          },
        },
      },
    });

    // Calculate total expenses
    const totalExpenses = invoiceItems.reduce(
      (acc: number, item) => acc + item.product.price * item.quantity,
      0
    );

    return res.json({
      totalExpenses,
      period: selectedPeriod,
    });
  } catch (error) {
    console.error("Error retrieving expense summary:", error);
    return res.status(500).json({
      message: "Error retrieving expense summary",
      error: error instanceof Error ? error.message : String(error),
    });
  }
};

================
File: server/src/controllers/productController.ts
================
// controllers/productController.ts

import { Request, Response } from "express";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export const createProduct = async (
  req: Request,
  res: Response
): Promise<Response | void> => {
  try {
    const { name, chineseName, price, minimumStock, vendorId } = req.body;
    const locationId = req.user?.locationId; // Assuming locationId is available

    if (!locationId) {
      return res.status(400).json({ message: "Location ID is required" });
    }

    // Create the Product
    const product = await prisma.product.create({
      data: {
        name,
        chineseName,
        price,
        minimumStock,
        vendorId,
      },
    });

    // Create the initial ProductStockLevel
    await prisma.productStockLevel.create({
      data: {
        productId: product.productId,
        locationId: locationId,
        stockQuantity: 0,
      },
    });

    return res.status(201).json(product);
  } catch (error) {
    console.error("Error creating product:", error);
    return res.status(500).json({ message: "Error creating product" });
  }
};

export const getProducts = async (
  req: Request,
  res: Response
): Promise<Response | void> => {
  try {
    const products = await prisma.product.findMany({
      include: {
        vendor: true,
        stockLevels: true,
      },
    });

    return res.json(products);
  } catch (error) {
    console.error("Error retrieving products:", error);
    return res.status(500).json({ message: "Error retrieving products" });
  }
};

export const getLowStockProducts = async (
  req: Request,
  res: Response
): Promise<Response | void> => {
  try {
    const products = await prisma.product.findMany({
      where: {
        minimumStock: {
          not: null,
        },
      },
      include: {
        stockLevels: true,
      },
    });

    const lowStockProducts = products.filter((product) => {
      const totalStockQuantity = product.stockLevels.reduce(
        (total, stockLevel) => total + stockLevel.stockQuantity,
        0
      );
      return totalStockQuantity <= (product.minimumStock || 0);
    });

    return res.json(lowStockProducts);
  } catch (error) {
    console.error("Error retrieving low stock products:", error);
    return res
      .status(500)
      .json({ message: "Error retrieving low stock products" });
  }
};

================
File: server/src/controllers/userController.ts
================
// controllers/userController.ts

import { Request, Response } from "express";
import { PrismaClient, User } from "@prisma/client";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

const prisma = new PrismaClient();
const jwtSecret = process.env.JWT_SECRET || "your_jwt_secret_key";

export const signup = async (req: Request, res: Response): Promise<void> => {
  try {
    const { name, email, password, role, locationId } = req.body;

    // Check if user already exists
    const existingUser = await prisma.user.findUnique({
      where: { email },
    });

    if (existingUser) {
      res.status(400).json({ message: "User already exists" });
      return;
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create user
    const user = await prisma.user.create({
      data: {
        name,
        email,
        password: hashedPassword,
        role,
        locationId,
      },
    });

    res.status(201).json({ message: "User created successfully" });
  } catch (error) {
    console.error("Error signing up:", error);
    res.status(500).json({ message: "Error signing up" });
  }
};

export const login = async (req: Request, res: Response): Promise<void> => {
  try {
    const { email, password } = req.body;

    // Find user
    const user = await prisma.user.findUnique({
      where: { email },
    });

    if (!user) {
      res.status(400).json({ message: "Invalid credentials" });
      return;
    }

    // Compare passwords
    const isValidPassword = await bcrypt.compare(password, user.password);

    if (!isValidPassword) {
      res.status(400).json({ message: "Invalid credentials" });
      return;
    }

    // Generate JWT
    const token = jwt.sign(
      {
        userId: user.userId,
        role: user.role,
        locationId: user.locationId,
      },
      jwtSecret,
      { expiresIn: "1h" }
    );

    res.json({ token });
  } catch (error) {
    console.error("Error logging in:", error);
    res.status(500).json({ message: "Error logging in" });
  }
};

export const getUsers = async (req: Request, res: Response): Promise<void> => {
  try {
    // Check if user is admin
    if (req.user?.role !== "ADMIN") {
      res.status(403).json({ message: "Forbidden" });
      return;
    }

    const users = await prisma.user.findMany();
    res.json(users);
  } catch (error) {
    console.error("Error retrieving users:", error);
    res.status(500).json({ message: "Error retrieving users" });
  }
};

================
File: server/src/controllers/vendorController.ts
================
import { Request, Response } from "express";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// Toggle vendor status (active/inactive)
export const toggleVendorStatus = async (req: Request, res: Response) => {
  try {
    const { vendorId } = req.params;

    const vendor = await prisma.vendor.findUnique({ where: { vendorId } });

    if (!vendor) {
      return res.status(404).json({ message: "Vendor not found" });
    }

    const updatedVendor = await prisma.vendor.update({
      where: { vendorId },
      data: {
        isActive: !vendor.isActive,
      },
    });

    res.status(200).json(updatedVendor);
  } catch (error) {
    console.error("Error updating vendor status:", error);
    res.status(500).json({ message: "Server error" });
  }
};

================
File: server/src/index.ts
================
import express from "express";
import dotenv from "dotenv";
import bodyParser from "body-parser";
import cors from "cors";
import helmet from "helmet";
import morgan from "morgan";
/* ROUTE IMPORTS */
import dashboardRoutes from "./routes/dashboardRoutes";
import productRoutes from "./routes/productRoutes";
import userRoutes from "./routes/userRoutes";
import expenseRoutes from "./routes/expenseRoutes";
import vendorRoutes from "./routes/vendorRoutes"; // Import the new vendor routes

/* CONFIGURATIONS */
dotenv.config();
const app = express();
app.use(express.json());
app.use(helmet());
app.use(helmet.crossOriginResourcePolicy({ policy: "cross-origin" }));
app.use(morgan("common"));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cors());

/* ROUTES */
app.use("/dashboard", dashboardRoutes); // http://localhost:8000/dashboard
app.use("/products", productRoutes); // http://localhost:8000/products
app.use("/users", userRoutes); // http://localhost:8000/users
app.use("/expenses", expenseRoutes); // http://localhost:8000/expenses
app.use("/vendors", vendorRoutes); // http://localhost:8000/vendors (New route for managing vendors)

/* SERVER */
const port = Number(process.env.PORT) || 3001;
app.listen(port, "0.0.0.0", () => {
  console.log(`Server running on port ${port}`);
});

================
File: server/src/middleware/authMiddleware.ts
================
import { Request, Response, NextFunction } from "express";
import jwt, { JwtPayload } from "jsonwebtoken";

const jwtSecret = process.env.JWT_SECRET || "your_jwt_secret_key";

interface DecodedToken extends JwtPayload {
  userId: string;
  name: string;
  email: string;
  role: "ADMIN" | "MANAGER" | "AREA_MANAGER";
  locationId?: string;
}

export const authenticateToken = (
    req: Request,
    res: Response,
    next: NextFunction
) => {
  const authHeader = req.headers["authorization"];
  const token = authHeader?.split(" ")[1];

  if (!token) {
    return res.status(401).json({ message: "Unauthorized: No token provided" });
  }

  jwt.verify(token, jwtSecret, (err, decodedToken) => {
    if (err) {
      if (err.name === "TokenExpiredError") {
        return res.status(401).json({ message: "Unauthorized: Token expired" });
      }
      return res.status(403).json({ message: "Forbidden: Invalid token" });
    }

    const decoded = decodedToken as DecodedToken;

    if (decoded) {
      req.user = {
        userId: decoded.userId,
        name: decoded.name,
        email: decoded.email,
        role: decoded.role,
        locationId: decoded.locationId,
      };
    } else {
      return res.status(403).json({ message: "Forbidden: Token malformed" });
    }

    next();
  });
};

================
File: server/src/middleware/authorizeRoles.ts
================
// middleware/authorizeRoles.ts

import { Request, Response, NextFunction } from "express";

export const authorizeRoles = (roles: string[]) => {
  return (req: Request, res: Response, next: NextFunction) => {
    const userRole = req.user?.role;
    if (!userRole || !roles.includes(userRole)) {
      return res.status(403).json({ message: "Forbidden" });
    }
    next();
  };
};

================
File: server/src/routes/dashboardRoutes.ts
================
// routes/dashboardRoutes.ts

import { Router } from "express";
import { getLowStockProducts } from "../controllers/dashboardController";
import { authenticateToken } from "../middleware/authMiddleware"; // Add authentication if needed
import { authorizeRoles } from "../middleware/authorizeRoles"; // Add role-based access control if needed

const router = Router();

// Route to get low stock products
router.get("/low-stock", authenticateToken, authorizeRoles(["ADMIN", "MANAGER"]), getLowStockProducts); // Restrict to admins or managers

export default router;

================
File: server/src/routes/expenseRoutes.ts
================
// routes/expenseRoutes.ts

import { Router } from "express";
import { getExpenseSummary } from "../controllers/expenseController";
import { authenticateToken } from "../middleware/authMiddleware"; // Add this for authentication
import { authorizeRoles } from "../middleware/authorizeRoles"; // Add this for role-based access if necessary

const router = Router();

router.get("/", authenticateToken, authorizeRoles(["ADMIN", "MANAGER"]), getExpenseSummary); // Restrict to certain roles if necessary

export default router;

================
File: server/src/routes/productRoutes.ts
================
// routes/productRoutes.ts

import express from "express";
import {
  createProduct,
  getProducts,
  getLowStockProducts,
} from "../controllers/productController";
import { authenticateToken } from "../middleware/authMiddleware";
import { authorizeRoles } from "../middleware/authorizeRoles";

const router = express.Router();

// Only admins and managers can create products
router.post(
    "/products",
    authenticateToken,  // Ensure only authenticated users can access this route
    authorizeRoles(["ADMIN", "MANAGER"]), // Restrict to ADMIN and MANAGER roles
    createProduct
);

// All authenticated users can view products
router.get(
    "/products",
    authenticateToken,  // Ensure only authenticated users can access this route
    getProducts
);

// Only admins and managers can view low stock products
router.get(
    "/products/low-stock",
    authenticateToken,  // Ensure only authenticated users can access this route
    authorizeRoles(["ADMIN", "MANAGER"]), // Restrict to ADMIN and MANAGER roles
    getLowStockProducts
);

export default router;

================
File: server/src/routes/userRoutes.ts
================
// routes/userRoutes.ts

import express from "express";
import { signup, login, getUsers } from "../controllers/userController";
import { authenticateToken } from "../middleware/authMiddleware";
import { authorizeRoles } from "../middleware/authorizeRoles"; // Add this for role-based access

const router = express.Router();

router.post("/signup", signup);
router.post("/login", login);
router.get("/", authenticateToken, authorizeRoles(["ADMIN"]), getUsers); // Restrict this to admins if necessary

export default router;

================
File: server/src/routes/vendorRoutes.ts
================
// routes/vendorRoutes.ts

import { Router } from "express";
import { toggleVendorStatus } from "../controllers/vendorController";
import { authenticateToken } from "../middleware/authMiddleware";
import { authorizeRoles } from "../middleware/authorizeRoles";

const router = Router();

// Route to toggle vendor status
router.patch(
    "/:vendorId/toggle-status",
    authenticateToken, // Ensure only authenticated users can access this route
    authorizeRoles(["ADMIN"]), // Only admins can toggle vendor status
    toggleVendorStatus
);

export default router;

================
File: server/tsconfig.json
================
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "nodenext" /* Specify what module code is generated. */,
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    "moduleResolution": "nodenext" /* Specify how TypeScript looks up a file from a given module specifier. */,
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    "typeRoots": ["./types", "./node_modules/@types"],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    "resolveJsonModule": true /* Enable importing .json files. */,
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist" /* Specify an output folder for all emitted files. */,
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": false /* Skip type checking all .d.ts files. */
  },
  "include": ["src", "types"]
}

================
File: server/types/express.d.ts
================
// types/express.d.ts

import * as express from "express";

declare global {
  namespace Express {
    // Define the User interface
    interface User {
      userId: string;
      name: string;
      email: string;
      role: "ADMIN" | "MANAGER" | "AREA_MANAGER"; // Include all roles
      locationId?: string; // Optional if not all users have a location
      // Add any other properties your User object has
    }

    // Define the Product interface
    interface Product {
      productId: string;
      name: string;
      chineseName?: string;
      price: number;
      minimumStock?: number;
      vendorId?: string;
      stockQuantity: number;
      // Add any other properties your Product object has
    }

    // Extend the Request interface to include user and product
    interface Request {
      user?: User; // Adding user property to req object
      product?: Product; // Adding product property to req object
      // Add any other custom properties here
    }
  }
}
